;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name canvas.core, :imports nil, :requires {events goog.events, goog.events goog.events, event-type goog.events.EventType, goog.events.EventType goog.events.EventType}, :uses nil, :defs {update-rectangle-delta! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 100, :column 7, :end-line 100, :end-column 30, :arglists (quote ([rect state]))}, :name canvas.core/update-rectangle-delta!, :variadic false, :file "src/canvas/core.cljs", :end-column 30, :method-params ([rect state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rect state]))}, on-clek {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 129, :column 7, :end-line 129, :end-column 14, :arglists (quote ([e]))}, :name canvas.core/on-clek, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, canvas-dom {:name canvas.core/canvas-dom, :file "src/canvas/core.cljs", :line 21, :column 1, :end-line 21, :end-column 16, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 21, :column 6, :end-line 21, :end-column 16}}, update-line-delta! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 96, :column 7, :end-line 96, :end-column 25, :arglists (quote ([line state]))}, :name canvas.core/update-line-delta!, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([line state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line state]))}, inner-height {:name canvas.core/inner-height, :file "src/canvas/core.cljs", :line 31, :column 1, :end-line 31, :end-column 18, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 31, :column 6, :end-line 31, :end-column 18}}, update-shape-position {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 68, :column 7, :end-line 68, :end-column 28, :arglists (quote ([shape]))}, :name canvas.core/update-shape-position, :variadic false, :file "src/canvas/core.cljs", :end-column 28, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, update-deltas! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 106, :column 7, :end-line 106, :end-column 21, :arglists (quote ([state]))}, :name canvas.core/update-deltas!, :variadic false, :file "src/canvas/core.cljs", :end-column 21, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, pi-times-2 {:name canvas.core/pi-times-2, :file "src/canvas/core.cljs", :line 19, :column 1, :end-line 19, :end-column 16, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 19, :column 6, :end-line 19, :end-column 16}}, direction-change-x {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 85, :column 7, :end-line 85, :end-column 25, :arglists (quote ([state]))}, :name canvas.core/direction-change-x, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, stop-line {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 148, :column 7, :end-line 148, :end-column 16, :arglists (quote ([line]))}, :name canvas.core/stop-line, :variadic false, :file "src/canvas/core.cljs", :end-column 16, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, render! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 112, :column 7, :end-line 112, :end-column 14, :arglists (quote ([state]))}, :name canvas.core/render!, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, upper-x {:name canvas.core/upper-x, :file "src/canvas/core.cljs", :line 23, :column 1, :end-line 23, :end-column 13, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 23, :column 6, :end-line 23, :end-column 13}}, state {:name canvas.core/state, :file "src/canvas/core.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 5, :column 6, :end-line 5, :end-column 11}}, clear! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 82, :column 7, :end-line 82, :end-column 13, :arglists (quote ([]))}, :name canvas.core/clear!, :variadic false, :file "src/canvas/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, direction-change-y {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 88, :column 7, :end-line 88, :end-column 25, :arglists (quote ([state]))}, :name canvas.core/direction-change-y, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 50, :column 7, :end-line 50, :end-column 12, :arglists (quote ([state]))}, :name canvas.core/draw!, :variadic false, :file "src/canvas/core.cljs", :end-column 12, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, update-positions {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 79, :column 7, :end-line 79, :end-column 23, :arglists (quote ([state]))}, :name canvas.core/update-positions, :variadic false, :file "src/canvas/core.cljs", :end-column 23, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, inner-width {:name canvas.core/inner-width, :file "src/canvas/core.cljs", :line 29, :column 1, :end-line 29, :end-column 17, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 29, :column 6, :end-line 29, :end-column 17}}, line-distance {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 91, :column 7, :end-line 91, :end-column 20, :arglists (quote ([start end]))}, :name canvas.core/line-distance, :variadic false, :file "src/canvas/core.cljs", :end-column 20, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end]))}, upper-y {:name canvas.core/upper-y, :file "src/canvas/core.cljs", :line 25, :column 1, :end-line 25, :end-column 13, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 25, :column 6, :end-line 25, :end-column 13}}, updater {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 61, :column 7, :end-line 61, :end-column 14, :arglists (quote ([state]))}, :name canvas.core/updater, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, fill-circle {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 45, :column 7, :end-line 45, :end-column 18, :arglists (quote ([x y radius start-angle end-angle]))}, :name canvas.core/fill-circle, :variadic false, :file "src/canvas/core.cljs", :end-column 18, :method-params ([x y radius start-angle end-angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x y radius start-angle end-angle]))}, context {:name canvas.core/context, :file "src/canvas/core.cljs", :line 27, :column 1, :end-line 27, :end-column 13, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 27, :column 6, :end-line 27, :end-column 13}}, draw-circle {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 40, :column 7, :end-line 40, :end-column 18, :arglists (quote ([x y radius start-angle end-angle]))}, :name canvas.core/draw-circle, :variadic false, :file "src/canvas/core.cljs", :end-column 18, :method-params ([x y radius start-angle end-angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x y radius start-angle end-angle]))}, update-lines {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/src/canvas/core.cljs", :line 37, :column 7, :end-line 37, :end-column 19, :arglists (quote ([state]))}, :name canvas.core/update-lines, :variadic false, :file "src/canvas/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :dx :color :w :circle :dy :type :radius :line :h :x :end :rectangle}, :order [:type :x :y :radius :dx :dy :color :circle :w :h :rectangle :line :end]}, :doc nil}