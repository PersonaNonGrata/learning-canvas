;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name canvas.core, :imports nil, :requires {events goog.events, goog.events goog.events, event-type goog.events.EventType, goog.events.EventType goog.events.EventType}, :uses nil, :defs {on-clek {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 154, :column 7, :end-line 154, :end-column 14, :arglists (quote ([e]))}, :name canvas.core/on-clek, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, canvas-dom {:name canvas.core/canvas-dom, :file "src/canvas/core.cljs", :line 21, :column 1, :end-line 21, :end-column 16, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 21, :column 6, :end-line 21, :end-column 16}}, update-line-delta! {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 110, :column 7, :end-line 110, :end-column 25, :arglists (quote ([line state]))}, :name canvas.core/update-line-delta!, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([line state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line state]))}, inner-height {:name canvas.core/inner-height, :file "src/canvas/core.cljs", :line 31, :column 1, :end-line 31, :end-column 18, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 31, :column 6, :end-line 31, :end-column 18}}, update-shape-position {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 65, :column 7, :end-line 65, :end-column 28, :arglists (quote ([shape]))}, :name canvas.core/update-shape-position, :variadic false, :file "src/canvas/core.cljs", :end-column 28, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, pi-times-2 {:name canvas.core/pi-times-2, :file "src/canvas/core.cljs", :line 19, :column 1, :end-line 19, :end-column 16, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 19, :column 6, :end-line 19, :end-column 16}}, update-shape-delta {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 83, :column 7, :end-line 83, :end-column 25, :arglists (quote ([shape]))}, :name canvas.core/update-shape-delta, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, render! {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 140, :column 7, :end-line 140, :end-column 14, :arglists (quote ([old-state]))}, :name canvas.core/render!, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([old-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([old-state]))}, update-deltas {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 90, :column 7, :end-line 90, :end-column 20, :arglists (quote ([state]))}, :name canvas.core/update-deltas, :variadic false, :file "src/canvas/core.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, out-of-bounds? {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 76, :column 7, :end-line 76, :end-column 21, :arglists (quote ([shape direction]))}, :name canvas.core/out-of-bounds?, :variadic false, :file "src/canvas/core.cljs", :end-column 21, :method-params ([shape direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shape direction]))}, state {:name canvas.core/state, :file "src/canvas/core.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 5, :column 6, :end-line 5, :end-column 11}}, clear! {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 96, :column 7, :end-line 96, :end-column 13, :arglists (quote ([]))}, :name canvas.core/clear!, :variadic false, :file "src/canvas/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, draw! {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 47, :column 7, :end-line 47, :end-column 12, :arglists (quote ([state]))}, :name canvas.core/draw!, :variadic false, :file "src/canvas/core.cljs", :end-column 12, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, update-positions {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 93, :column 7, :end-line 93, :end-column 23, :arglists (quote ([state]))}, :name canvas.core/update-positions, :variadic false, :file "src/canvas/core.cljs", :end-column 23, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, inner-width {:name canvas.core/inner-width, :file "src/canvas/core.cljs", :line 29, :column 1, :end-line 29, :end-column 17, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 29, :column 6, :end-line 29, :end-column 17}}, line-distance {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 105, :column 7, :end-line 105, :end-column 20, :arglists (quote ([start end]))}, :name canvas.core/line-distance, :variadic false, :file "src/canvas/core.cljs", :end-column 20, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end]))}, updater {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 58, :column 7, :end-line 58, :end-column 14, :arglists (quote ([state]))}, :name canvas.core/updater, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, fill-circle {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 42, :column 7, :end-line 42, :end-column 18, :arglists (quote ([x y radius start-angle end-angle]))}, :name canvas.core/fill-circle, :variadic false, :file "src/canvas/core.cljs", :end-column 18, :method-params ([x y radius start-angle end-angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x y radius start-angle end-angle]))}, context {:name canvas.core/context, :file "src/canvas/core.cljs", :line 27, :column 1, :end-line 27, :end-column 13, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 27, :column 6, :end-line 27, :end-column 13}}, draw-circle {:protocol-inline nil, :meta {:file "/home/persona/Projects/temp/temp2/canvas/canvas/src/canvas/core.cljs", :line 37, :column 7, :end-line 37, :end-column 18, :arglists (quote ([x y radius start-angle end-angle]))}, :name canvas.core/draw-circle, :variadic false, :file "src/canvas/core.cljs", :end-column 18, :method-params ([x y radius start-angle end-angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x y radius start-angle end-angle]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :horizontal :dx :color :w :circle :dy :vertical :type :radius :line :h :x :end :rectangle}, :order [:type :x :y :h :w :dx :dy :color :rectangle :circle :radius :line :end :horizontal :vertical]}, :doc nil}