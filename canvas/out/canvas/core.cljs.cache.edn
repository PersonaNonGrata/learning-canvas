;; Analyzed by ClojureScript 1.7.48
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name canvas.core, :imports nil, :requires {events goog.events, goog.events goog.events, event-type goog.events.EventType, goog.events.EventType goog.events.EventType, cljs.core.async cljs.core.async}, :uses {close! cljs.core.async, chan cljs.core.async}, :defs {update-circle-delta {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 201, :column 7, :end-line 201, :end-column 26, :arglists (quote ([state]))}, :name canvas.core/update-circle-delta, :variadic false, :file "src/canvas/core.cljs", :end-column 26, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, timeout {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 163, :column 7, :end-line 163, :end-column 14, :arglists (quote ([ms]))}, :name canvas.core/timeout, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms]))}, on-clek {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 285, :column 7, :end-line 285, :end-column 14, :arglists (quote ([e]))}, :name canvas.core/on-clek, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, canvas-dom {:name canvas.core/canvas-dom, :file "src/canvas/core.cljs", :line 33, :column 1, :end-line 33, :end-column 16, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 33, :column 6, :end-line 33, :end-column 16}}, line-direction {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 226, :column 7, :end-line 226, :end-column 21, :arglists (quote ([line]))}, :name canvas.core/line-direction, :variadic false, :file "src/canvas/core.cljs", :end-column 21, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, add-lines! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 271, :column 7, :end-line 271, :end-column 17, :arglists (quote ([old-state x y]))}, :name canvas.core/add-lines!, :variadic false, :file "src/canvas/core.cljs", :end-column 17, :method-params ([old-state x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 3, :fn-var true, :arglists (quote ([old-state x y]))}, update-line-delta! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 144, :column 7, :end-line 144, :end-column 25, :arglists (quote ([line state]))}, :name canvas.core/update-line-delta!, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([line state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line state]))}, inner-height {:name canvas.core/inner-height, :file "src/canvas/core.cljs", :line 43, :column 1, :end-line 43, :end-column 18, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 43, :column 6, :end-line 43, :end-column 18}}, update-shape-position {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 89, :column 7, :end-line 89, :end-column 28, :arglists (quote ([shape]))}, :name canvas.core/update-shape-position, :variadic false, :file "src/canvas/core.cljs", :end-column 28, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, hoppla {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 168, :column 7, :end-line 168, :end-column 13, :arglists (quote ([men]))}, :name canvas.core/hoppla, :variadic false, :file "src/canvas/core.cljs", :end-column 13, :method-params ([men]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([men]))}, pi-times-2 {:name canvas.core/pi-times-2, :file "src/canvas/core.cljs", :line 31, :column 1, :end-line 31, :end-column 16, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 31, :column 6, :end-line 31, :end-column 16}}, test-delta {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 112, :column 7, :end-line 112, :end-column 17, :arglists (quote ([shape]))}, :name canvas.core/test-delta, :variadic false, :file "src/canvas/core.cljs", :end-column 17, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, sr! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 188, :column 7, :end-line 188, :end-column 10, :arglists (quote ([]))}, :name canvas.core/sr!, :variadic false, :file "src/canvas/core.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-shape-delta {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 119, :column 7, :end-line 119, :end-column 25, :arglists (quote ([shape]))}, :name canvas.core/update-shape-delta, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, render! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 255, :column 7, :end-line 255, :end-column 14, :arglists (quote ([the-state]))}, :name canvas.core/render!, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([the-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([the-state]))}, update-deltas {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 130, :column 7, :end-line 130, :end-column 20, :arglists (quote ([state]))}, :name canvas.core/update-deltas, :variadic false, :file "src/canvas/core.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, replay! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 184, :column 7, :end-line 184, :end-column 14, :arglists (quote ([]))}, :name canvas.core/replay!, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, stop! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 158, :column 7, :end-line 158, :end-column 12, :arglists (quote ([]))}, :name canvas.core/stop!, :variadic false, :file "src/canvas/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, history {:name canvas.core/history, :file "src/canvas/core.cljs", :line 9, :column 1, :end-line 9, :end-column 13, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 9, :column 6, :end-line 9, :end-column 13}}, out-of-bounds? {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 100, :column 7, :end-line 100, :end-column 21, :arglists (quote ([shape direction]))}, :name canvas.core/out-of-bounds?, :variadic false, :file "src/canvas/core.cljs", :end-column 21, :method-params ([shape direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shape direction]))}, state {:name canvas.core/state, :file "src/canvas/core.cljs", :line 11, :column 1, :end-line 11, :end-column 11, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 11, :column 6, :end-line 11, :end-column 11}}, clear! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 136, :column 7, :end-line 136, :end-column 13, :arglists (quote ([]))}, :name canvas.core/clear!, :variadic false, :file "src/canvas/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reset-render! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 148, :column 7, :end-line 148, :end-column 20, :arglists (quote ([old-state]))}, :name canvas.core/reset-render!, :variadic false, :file "src/canvas/core.cljs", :end-column 20, :method-params ([old-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([old-state]))}, circles-colliding? {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 195, :column 7, :end-line 195, :end-column 25, :arglists (quote ([c1 c2]))}, :name canvas.core/circles-colliding?, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([c1 c2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c1 c2]))}, draw! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 70, :column 7, :end-line 70, :end-column 12, :arglists (quote ([the-state]))}, :name canvas.core/draw!, :variadic false, :file "src/canvas/core.cljs", :end-column 12, :method-params ([the-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([the-state]))}, update-positions {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 133, :column 7, :end-line 133, :end-column 23, :arglists (quote ([state]))}, :name canvas.core/update-positions, :variadic false, :file "src/canvas/core.cljs", :end-column 23, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, inner-width {:name canvas.core/inner-width, :file "src/canvas/core.cljs", :line 41, :column 1, :end-line 41, :end-column 17, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 41, :column 6, :end-line 41, :end-column 17}}, update-circle-if-collide-with-line {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 241, :column 7, :end-line 241, :end-column 41, :arglists (quote ([state]))}, :name canvas.core/update-circle-if-collide-with-line, :variadic false, :file "src/canvas/core.cljs", :end-column 41, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, abs {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 212, :column 7, :end-line 212, :end-column 10, :arglists (quote ([n]))}, :name canvas.core/abs, :variadic false, :file "src/canvas/core.cljs", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, foreach {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 181, :column 7, :end-line 181, :end-column 14, :arglists (quote ([f xs]))}, :name canvas.core/foreach, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([f xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f xs]))}, line-distance {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 139, :column 7, :end-line 139, :end-column 20, :arglists (quote ([start end]))}, :name canvas.core/line-distance, :variadic false, :file "src/canvas/core.cljs", :end-column 20, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end]))}, circle-collide-with-line? {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 231, :column 7, :end-line 231, :end-column 32, :arglists (quote ([circle line]))}, :name canvas.core/circle-collide-with-line?, :variadic false, :file "src/canvas/core.cljs", :end-column 32, :method-params ([circle line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 2, :fn-var true, :arglists (quote ([circle line]))}, updater {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 82, :column 7, :end-line 82, :end-column 14, :arglists (quote ([state]))}, :name canvas.core/updater, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, fill-circle {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 59, :column 7, :end-line 59, :end-column 18, :arglists (quote ([x y radius start-angle end-angle]))}, :name canvas.core/fill-circle, :variadic false, :file "src/canvas/core.cljs", :end-column 18, :method-params ([x y radius start-angle end-angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x y radius start-angle end-angle]))}, context {:name canvas.core/context, :file "src/canvas/core.cljs", :line 39, :column 1, :end-line 39, :end-column 13, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 39, :column 6, :end-line 39, :end-column 13}}, draw-line {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 64, :column 7, :end-line 64, :end-column 16, :arglists (quote ([start end]))}, :name canvas.core/draw-line, :variadic false, :file "src/canvas/core.cljs", :end-column 16, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end]))}, draw-circle {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 49, :column 7, :end-line 49, :end-column 18, :arglists (quote ([x y radius start-angle end-angle]))}, :name canvas.core/draw-circle, :variadic false, :file "src/canvas/core.cljs", :end-column 18, :method-params ([x y radius start-angle end-angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x y radius start-angle end-angle]))}}, :require-macros {m cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y :horizontal :dx :color :else :w :circle :start :dy :vertical :recur :type :radius :line :h :x :end :rectangle}, :order [:type :start :end :dx :dy :color :line :x :y :rectangle :w :h :circle :radius :horizontal :vertical :recur :else]}, :doc nil}