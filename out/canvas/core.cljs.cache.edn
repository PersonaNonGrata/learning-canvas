;; Analyzed by ClojureScript 1.7.48
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name canvas.core, :imports nil, :requires {events goog.events, goog.events goog.events, event-type goog.events.EventType, goog.events.EventType goog.events.EventType, cljs.core.async cljs.core.async}, :uses {close! cljs.core.async, chan cljs.core.async}, :defs {update-circle-delta {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 192, :column 7, :end-line 192, :end-column 26, :arglists (quote ([state]))}, :name canvas.core/update-circle-delta, :variadic false, :file "src/canvas/core.cljs", :end-column 26, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, timeout {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 168, :column 7, :end-line 168, :end-column 14, :arglists (quote ([ms]))}, :name canvas.core/timeout, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms]))}, on-clek {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 270, :column 7, :end-line 270, :end-column 14, :arglists (quote ([e]))}, :name canvas.core/on-clek, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, canvas-dom {:name canvas.core/canvas-dom, :file "src/canvas/core.cljs", :line 44, :column 1, :end-line 44, :end-column 16, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 44, :column 6, :end-line 44, :end-column 16}}, line-direction {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 205, :column 7, :end-line 205, :end-column 21, :arglists (quote ([line]))}, :name canvas.core/line-direction, :variadic false, :file "src/canvas/core.cljs", :end-column 21, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, add-lines! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 253, :column 7, :end-line 253, :end-column 17, :arglists (quote ([old-state x y]))}, :name canvas.core/add-lines!, :variadic false, :file "src/canvas/core.cljs", :end-column 17, :method-params ([old-state x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 3, :fn-var true, :arglists (quote ([old-state x y]))}, update-line-delta! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 149, :column 7, :end-line 149, :end-column 25, :arglists (quote ([line state]))}, :name canvas.core/update-line-delta!, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([line state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line state]))}, inner-height {:name canvas.core/inner-height, :file "src/canvas/core.cljs", :line 54, :column 1, :end-line 54, :end-column 18, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 54, :column 6, :end-line 54, :end-column 18}}, update-shape-position {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 100, :column 7, :end-line 100, :end-column 28, :arglists (quote ([shape]))}, :name canvas.core/update-shape-position, :variadic false, :file "src/canvas/core.cljs", :end-column 28, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, pi-times-2 {:name canvas.core/pi-times-2, :file "src/canvas/core.cljs", :line 42, :column 1, :end-line 42, :end-column 16, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 42, :column 6, :end-line 42, :end-column 16}}, my-rand {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 248, :column 7, :end-line 248, :end-column 14, :arglists (quote ([]))}, :name canvas.core/my-rand, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, sr! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 181, :column 7, :end-line 181, :end-column 10, :arglists (quote ([]))}, :name canvas.core/sr!, :variadic false, :file "src/canvas/core.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-shape-delta {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 124, :column 7, :end-line 124, :end-column 25, :arglists (quote ([shape]))}, :name canvas.core/update-shape-delta, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, render! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 232, :column 7, :end-line 232, :end-column 14, :arglists (quote ([the-state]))}, :name canvas.core/render!, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([the-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([the-state]))}, update-deltas {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 135, :column 7, :end-line 135, :end-column 20, :arglists (quote ([state]))}, :name canvas.core/update-deltas, :variadic false, :file "src/canvas/core.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, replay! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 173, :column 7, :end-line 173, :end-column 14, :arglists (quote ([]))}, :name canvas.core/replay!, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, stop! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 163, :column 7, :end-line 163, :end-column 12, :arglists (quote ([]))}, :name canvas.core/stop!, :variadic false, :file "src/canvas/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, history {:name canvas.core/history, :file "src/canvas/core.cljs", :line 9, :column 1, :end-line 9, :end-column 13, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 9, :column 6, :end-line 9, :end-column 13}}, out-of-bounds? {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 111, :column 7, :end-line 111, :end-column 21, :arglists (quote ([shape direction]))}, :name canvas.core/out-of-bounds?, :variadic false, :file "src/canvas/core.cljs", :end-column 21, :method-params ([shape direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shape direction]))}, state {:name canvas.core/state, :file "src/canvas/core.cljs", :line 11, :column 1, :end-line 11, :end-column 11, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 11, :column 6, :end-line 11, :end-column 11}}, clear! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 141, :column 7, :end-line 141, :end-column 13, :arglists (quote ([]))}, :name canvas.core/clear!, :variadic false, :file "src/canvas/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reset-render! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 153, :column 7, :end-line 153, :end-column 20, :arglists (quote ([old-state]))}, :name canvas.core/reset-render!, :variadic false, :file "src/canvas/core.cljs", :end-column 20, :method-params ([old-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([old-state]))}, circles-colliding? {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 186, :column 7, :end-line 186, :end-column 25, :arglists (quote ([c1 c2]))}, :name canvas.core/circles-colliding?, :variadic false, :file "src/canvas/core.cljs", :end-column 25, :method-params ([c1 c2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c1 c2]))}, draw! {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 81, :column 7, :end-line 81, :end-column 12, :arglists (quote ([the-state]))}, :name canvas.core/draw!, :variadic false, :file "src/canvas/core.cljs", :end-column 12, :method-params ([the-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([the-state]))}, update-positions {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 138, :column 7, :end-line 138, :end-column 23, :arglists (quote ([state]))}, :name canvas.core/update-positions, :variadic false, :file "src/canvas/core.cljs", :end-column 23, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, inner-width {:name canvas.core/inner-width, :file "src/canvas/core.cljs", :line 52, :column 1, :end-line 52, :end-column 17, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 52, :column 6, :end-line 52, :end-column 17}}, update-circle-if-collide-with-line {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 219, :column 7, :end-line 219, :end-column 41, :arglists (quote ([state]))}, :name canvas.core/update-circle-if-collide-with-line, :variadic false, :file "src/canvas/core.cljs", :end-column 41, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, abs {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 203, :column 7, :end-line 203, :end-column 10, :arglists (quote ([n]))}, :name canvas.core/abs, :variadic false, :file "src/canvas/core.cljs", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, line-distance {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 144, :column 7, :end-line 144, :end-column 20, :arglists (quote ([start end]))}, :name canvas.core/line-distance, :variadic false, :file "src/canvas/core.cljs", :end-column 20, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end]))}, circle-collide-with-line? {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 210, :column 7, :end-line 210, :end-column 32, :arglists (quote ([circle direction line]))}, :name canvas.core/circle-collide-with-line?, :variadic false, :file "src/canvas/core.cljs", :end-column 32, :method-params ([circle direction line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 3, :fn-var true, :arglists (quote ([circle direction line]))}, updater {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 93, :column 7, :end-line 93, :end-column 14, :arglists (quote ([state]))}, :name canvas.core/updater, :variadic false, :file "src/canvas/core.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, fill-circle {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 70, :column 7, :end-line 70, :end-column 18, :arglists (quote ([x y radius start-angle end-angle]))}, :name canvas.core/fill-circle, :variadic false, :file "src/canvas/core.cljs", :end-column 18, :method-params ([x y radius start-angle end-angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x y radius start-angle end-angle]))}, context {:name canvas.core/context, :file "src/canvas/core.cljs", :line 50, :column 1, :end-line 50, :end-column 13, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 50, :column 6, :end-line 50, :end-column 13}}, draw-line {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 75, :column 7, :end-line 75, :end-column 16, :arglists (quote ([start end]))}, :name canvas.core/draw-line, :variadic false, :file "src/canvas/core.cljs", :end-column 16, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end]))}, draw-circle {:protocol-inline nil, :meta {:file "/home/persona/Projects/canvas/canvas/src/canvas/core.cljs", :line 60, :column 7, :end-line 60, :end-column 18, :arglists (quote ([x y radius start-angle end-angle]))}, :name canvas.core/draw-circle, :variadic false, :file "src/canvas/core.cljs", :end-column 18, :method-params ([x y radius start-angle end-angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x y radius start-angle end-angle]))}}, :require-macros {m cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y :horizontal :dx :color :else :w :circle :start :dy :vertical :recur :type :radius :line :h :x :end :rectangle}, :order [:type :start :end :dx :dy :color :line :x :y :rectangle :w :h :circle :radius :horizontal :vertical :recur :else]}, :doc nil}